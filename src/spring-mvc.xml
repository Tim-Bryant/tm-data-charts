<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-4.1.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
			http://www.springframework.org/schema/mvc 
			http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-4.1.xsd
			http://www.springframework.org/schema/task 
      		http://www.springframework.org/schema/task/spring-task.xsd" 
            >
  
	
	<!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
	<!-- 启动扫描所有的注解 -->
	<context:component-scan base-package="com.app.timer">
	</context:component-scan>
	
	<!-- 默认加载login页面 -->
	<mvc:view-controller path="/" view-name="login" />
	
	<!-- 访问静态资源文件  --> 
	<!-- mapping：映射location：本地资源路径，注意必须是webapp根目录下的路径。
             两个*，它表示映射resources/下所有的URL，包括子路径（即接多个/） -->
	<mvc:resources mapping="/css/**" location="/css/" />
	<mvc:resources mapping="/js/**"  location="/js/" />
	<mvc:resources mapping="/images/**" location="/images/" />
	
	<!-- Spring MVC -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="contentType" value="text/html"/>    
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- ②：启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->  
	<bean  class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">  
	</bean>
	
	<bean  
	    class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">  
	    <property name="messageConverters">  
	        <list> 
	            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
			        <property name="supportedMediaTypes"> 
			            <list>
			                <!-- 目前测试下这里的顺序不可以随便 -->
            				<value>application/json;charset=UTF-8</value>  
            				<value>application/x-www-form-urlencoded;charset=UTF-8</value>  
							<value>text/html;charset=UTF-8</value>  
							<value>text/plain;charset=UTF-8</value>  
			            </list> 
			        </property> 
               </bean>
               <bean class="org.springframework.http.converter.json.GsonHttpMessageConverter">
                 <property name="supportedMediaTypes">
					<list>
						<value>application/json;charset=UTF-8</value>
					</list>
				</property>
               </bean>  
               <!-- <ref bean="gsonConverter"/> -->
	        </list>  
	    </property>  
	</bean>
	
	<!-- 输出对象转JSON支持 -->
	<!-- <bean id="gsonConverter" class="com.app.timer.utils.converter.MyGsonConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/json;charset=UTF-8</value>
			</list>
		</property>
	</bean> -->
	
	
	<!-- 主要作用于@Controller，激活该模式 下面是一种简写形式，完全可以手动配置替代这种简写形式； 它会自动注册RequestMappingHandlerMapping与RequestMappingHandlerAdapter 
		两个bean, 是spring MVC为@Controllers分发请求所必须的 -->
	<!-- Enables the Spring MVC @Controller programming model -->
 	<!-- 处理请求返回json字符串的中文乱码问题 -->
    <!-- <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8" index="0"></constructor-arg> 
		        <property name="supportedMediaTypes"> 
		            <list>
		                <value>application/json;charset=UTF-8</value>  
		            </list> 
		        </property> 
            </bean>
            <bean class="org.springframework.http.converter.json.GsonHttpMessageConverter"/>
        </mvc:message-converters>
	</mvc:annotation-driven > -->
    
    <!-- 支持上传文件 --> 
    <!-- <bean id="multipartResolver" 
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />  -->
    
    
    <!-- 注解执行定时任务    开启这个配置，spring才能识别@Scheduled注解 -->
    <!-- Spring定时器注解开关-->
   <!--  <task:annotation-driven scheduler="qbScheduler" mode="proxy"/>
    <task:scheduler id="qbScheduler" pool-size="10"/>  -->
     
     
      <!-- 在xml中进行配置，使用定时器
        ref : pojo类的名称
        method : 调用的方式名称
        cron : cronExpression表达式
        cron="0/5 * * * * ?"  //表示五秒钟执行一次
     -->
	<!-- Spring 定时器的实现  配置文件方式  不建议使用 -->
	<!-- <task:scheduled-tasks>
        <task:scheduled ref="mTask" method="testJob" cron="0/5 * * * * ?"/>
    </task:scheduled-tasks> -->
    
    
    <!-- 我们在定义类继承job的时候，就可以使用autowired注入service对象了： -->
    <!-- 定时任务的factorybean,配置其他config -->  
    <!-- <bean id="myJobFactory" class="com.app.timer.task.util.MyJobFactory"></bean>  
    <bean id="schedulerFactoryBean" class="com.app.timer.task.util.SchedulerFactoryBeanWithShutdownDelay">  
        <property name="jobFactory" ref="myJobFactory"></property>  
    </bean> -->
    
</beans>